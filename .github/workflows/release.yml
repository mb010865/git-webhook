name: Release Quarkus Native Executable and Container Image

on:
  push:
    tags:
      - 'v*.*.*' # Triggers on tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Java and GraalVM
      - name: Set up GraalVM (Java 21)
        uses: graalvm/setup-graalvm@v1
        with:
          version: '21.0.2' # GraalVM Community Edition for Java 21
          java-version: '21'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build the native executable
      - name: Build with Maven
        run: |
          mvn package -Pnative -DskipTests
          chmod +x target/git-webhook-1.0.0-SNAPSHOT-runner

      # Create a GitHub Release and upload the executable
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/git-webhook-1.0.0-SNAPSHOT-runner
          asset_name: git-webhook-${{ github.ref_name }}-linux-x64
          asset_content_type: application/octet-stream

      # Set up Docker Buildx for container building
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the container image
      - name: Build and Push Container Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/git-webhook:${{ github.ref_name }} \
                       -t ghcr.io/${{ github.repository_owner }}/git-webhook:latest .
          docker push ghcr.io/${{ github.repository_owner }}/git-webhook:${{ github.ref_name }}
          docker push ghcr.io/${{ github.repository_owner }}/git-webhook:latest